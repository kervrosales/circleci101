# Orb 'circleci/slack@3.4.2' resolved to 'circleci/slack@3.4.2'
# Orb 'testimio/runner@1.1.0' resolved to 'testimio/runner@1.1.0'
version: 2
jobs:
  build:
    docker:
    - image: circleci/python:3.8
    steps:
    - run:
        name: The First Step
        command: |
          if ["${CIRCLE_BRANCH}" == "master"];
          then
            echo 'Hello World!'8
          else
            echo 'This is the delivery pipeline'
          fi
    - run:
        command: |
          if [ ! -x /bin/bash ]; then
            echo Bash not installed.
            exit 1
          fi
        name: Provide error if non-bash shell
    - run:
        command: "# Provide error if no webhook is set and error. Otherwise continue\nif [ -z \"${SLACK_WEBHOOK}\" ]; then\n  echo \"NO SLACK WEBHOOK SET\"\n  echo \"Please input your SLACK_WEBHOOK value either in the settings for this project, or as a parameter for this orb.\"\n  exit 1\nelse\n  # Webhook properly set.\n  echo Notifying Slack Channel\n  #Create Members string\n  if [ -n \"\" ]; then\n    IFS=\",\" read -ra SLACK_MEMBERS <<< \"\"\n    for i in \"${SLACK_MEMBERS[@]}\"; do\n      if [ $(echo ${i} | head -c 1) == \"S\" ]; then\n        SLACK_MENTIONS=\"${SLACK_MENTIONS}<!subteam^${i}> \"\n      elif echo ${i} | grep -E \"^(here|channel|everyone)$\" > /dev/null; then\n        SLACK_MENTIONS=\"${SLACK_MENTIONS}<!${i}> \"\n      else\n        SLACK_MENTIONS=\"${SLACK_MENTIONS}<@${i}> \"\n      fi\n    done\n  fi\n  curl -X POST -H 'Content-type: application/json' \\\n    --data \\\n    \"{ \\\n      \\\"attachments\\\": [ \\\n        { \\\n          \\\"fallback\\\": \\\"\n> *Git Author*: Kervin Rosales \n>*Deployer*: $(git config user.name) \n> *Git Commit* ${CIRCLE_SHA1}:\n> - $CIRCLE_BUILD_URL\\\", \\\n          \\\"text\\\": \\\"\n> *Git Author*: Kervin Rosales \n>*Deployer*: $(git config user.name) \n> *Git Commit* ${CIRCLE_SHA1}:\n> $SLACK_MENTIONS\\\", \\\n          \\\"author_name\\\": \\\"\\\", \\\n          \\\"author_link\\\": \\\"\\\", \\\n          \\\"title\\\": \\\"Starting Deployment\\\", \\\n          \\\"title_link\\\": \\\"Commit ID: 123123123\\\", \\\n          \\\"footer\\\": \\\"\\\", \\\n          \\\"ts\\\": \\\"$(date +%s)\\\", \\\n          \\\"fields\\\": [ \\\n            { \\\n              \\\"title\\\": \\\"Job Number\\\", \\\n              \\\"value\\\": \\\"$CIRCLE_BUILD_NUM\\\", \\\n              \\\"short\\\": true \\\n            } \\\n          ], \\\n          \\\"image_url\\\": \\\"\\\", \\\n          \\\"actions\\\": [ \\\n            { \\\n              \\\"type\\\": \\\"button\\\", \\\n              \\\"text\\\": \\\"Visit Job\\\", \\\n              \\\"url\\\": \\\"$CIRCLE_BUILD_URL\\\" \\\n            } \\\n          ], \\\n          \\\"color\\\": \\\"#42e2f4\\\" \\\n        } \\\n      ] \\\n    }\" ${SLACK_WEBHOOK}\nfi\n"
        name: Slack Notification
        shell: /bin/bash
  staging_deploy-1:
    docker:
    - image: circleci/python:3.8
    steps:
    - deploy:
        name: Staging Deployment
        command: |
          echo 'DEPLOYING STAG!!!'
  testimio/run_tests:
    docker:
    - image: testim/docker-cli
    steps:
    - run:
        name: run tests
        command: |
          mkdir -p /tmp/circleci-test-results
          OPTIONS='' --test-plan "Regression:AP" --test-plan "Regression:ApprovalRouting" --test-plan "Regression:Finance" \
          --test-plan "Regression:Request" --test-plan "Regression:Approval" --test-plan "Regression:LocationsAndUsers" \
          --test-plan "Regression:Procure" --test-plan "Regression:Receive" --test-plan "Regression:Navigation" \
          --base-url https://release.procurify.com'
          '
          if [[ -z ${OPTIONS} ]]; then
            testim --project "${TESTIMPROJECT_ID}" \
              --grid "Testim-Grid" \
              --token "${TESTIM_TOKEN}" \
              --report-file /tmp/circleci-test-results/report.xml
          else
            testim --project "${TESTIMPROJECT_ID}" \
              --grid "Testim-Grid" \
              --token "${TESTIM_TOKEN}" \
              --report-file /tmp/circleci-test-results/report.xml \
              ' --test-plan "Regression:AP" --test-plan "Regression:ApprovalRouting" --test-plan "Regression:Finance" \
          --test-plan "Regression:Request" --test-plan "Regression:Approval" --test-plan "Regression:LocationsAndUsers" \
          --test-plan "Regression:Procure" --test-plan "Regression:Receive" --test-plan "Regression:Navigation" \
          --base-url https://release.procurify.com'

          fi
    - store_artifacts:
        path: /tmp/circleci-test-results
    - store_test_results:
        path: /tmp/circleci-test-results
  slack/approval-notification:
    docker:
    - environment:
        TERM: dumb
      image: cibuilds/base:latest
    resource_class: small
    steps:
    - run:
        command: |
          if [ ! -x /bin/bash ]; then
            echo Bash not installed.
            exit 1
          fi
        name: Provide error if non-bash shell
    - run:
        command: |
          # Provide error if no webhook is set and error. Otherwise continue
          if [ -z "${SLACK_WEBHOOK_CIRCLE}" ]; then
            echo "NO SLACK WEBHOOK SET"
            echo "Please input your SLACK_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
            exit 1
          else
            #Create Members string
            if [ -n "" ]; then
              IFS="," read -ra SLACK_MEMBERS <<< ""
              for i in "${SLACK_MEMBERS[@]}"; do
                if [ $(echo ${i} | head -c 1) == "S" ]; then
                  SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
                elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                  SLACK_MENTIONS="${SLACK_MENTIONS}<!${i}> "
                else
                  SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
                fi
              done
            fi

            curl -X POST -H 'Content-type: application/json' \
              --data \
              "{ \
                \"attachments\": [ \
                  { \
                    \"fallback\": \"Waiting Approval - https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\", \
                    \"text\": \"Waiting Approval $SLACK_MENTIONS\", \
                    \"fields\": [ \
                      { \
                        \"title\": \"Project\", \
                        \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                        \"short\": true \
                      }, \
                      { \
                        \"title\": \"Job Number\", \
                        \"value\": \"$CIRCLE_BUILD_NUM\", \
                        \"short\": true \
                      } \
                    ], \
                    \"actions\": [ \
                      { \
                        \"type\": \"button\", \
                        \"text\": \"Visit Workflow\", \
                        \"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \
                      } \
                    ], \
                    \"color\": \"#3AA3E3\" \
                  } \
                ] \
              }" ${SLACK_WEBHOOK_CIRCLE}
            echo "Awaiting approval notified."
          fi
        name: Slack - Sending Approval Notification
        shell: /bin/bash
  staging_deploy-2:
    docker:
    - image: circleci/python:3.8
    steps:
    - deploy:
        name: Staging Deployment
        command: |
          echo 'DEPLOYING STAG!!!'
workflows:
  simple_workflow:
    jobs:
    - build
    - staging_deploy-1
    - testimio/run_tests:
        filters:
          branches:
            only:
            - beta
    - slack/approval-notification:
        requires:
        - build
    - wait_for_approve:
        type: approval
        requires:
        - testimio/run_tests
    - staging_deploy-2:
        requires:
        - wait_for_approve
  version: 2

# Original config.yml file:
# version: 2.1
# 
# executors:
#   python-executor:
#     docker:
#       - image: circleci/python:3.8
# aliases:
#   - &ola
#     run:
#       name: say ola
#       command: |
#         echo \"Ola!a\"
# 
# orbs:
#   slack: circleci/slack@3.4.2
#   testimio: testimio/runner@1.1.0
# 
# jobs:
#   build:
#     executor: python-executor
#     steps:
#       - run:
#           name: The First Step
#           command: |
#             if [\"${CIRCLE_BRANCH}\" == \"master\"];
#             then
#               echo 'Hello World!'8
#             else
#               echo 'This is the delivery pipeline'
#             fi
#       - slack/notify:
#           color: '#42e2f4'
#           title: Starting Deployment 
#           title_link: 'Commit ID: 123123123'
#           include_project_field: false
#           ts: $(date +%s)
#           message:
#             \"\\n> *Git Author*: Kervin Rosales \\n>*Deployer*: \\
#             $(git config user.name) \\n> *Git Commit* ${CIRCLE_SHA1}:\\n>\"
#           footer: 
#           webhook: ${SLACK_WEBHOOK}
#   staging_deploy:
#     executor: python-executor
#     steps:
#       - deploy:
#           name: Staging Deployment
#           command: |
#             echo 'DEPLOYING STAG!!!'
# 
# workflows:
#   simple_workflow:
#     jobs:
#       - build
#       - staging_deploy
#       - testimio/run_tests:
#           token: ${TESTIM_TOKEN}
#           project_id: ${TESTIMPROJECT_ID}
#           grid_name: 'Testim-Grid'
#           options:  |
#             ' --test-plan \"Regression:AP\" --test-plan \"Regression:ApprovalRouting\" --test-plan \"Regression:Finance\" \\
#             --test-plan \"Regression:Request\" --test-plan \"Regression:Approval\" --test-plan \"Regression:LocationsAndUsers\" \\
#             --test-plan \"Regression:Procure\" --test-plan \"Regression:Receive\" --test-plan \"Regression:Navigation\" \\
#             --base-url https://release.procurify.com'
#           filters:
#             branches:
#               only:
#                 - beta
# 
#       - slack/approval-notification:
#           requires:
#             - build
#           message: Waiting Approval                    
#           webhook: ${SLACK_WEBHOOK_CIRCLE}
#       - wait_for_approve:
#           type: approval
#           requires:
#             - testimio/run_tests
#       - staging_deploy:
#           requires:
#             - wait_for_approve