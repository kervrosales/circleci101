version: 2.1

parameters:
  timestamp:
    type: string
    default: $(date +%s)
  git-author:
    type: string
    default: $(git log --format='%aN' ${CIRCLE_SHA1}^!)
  deployer:
    type: string
    default: $(git config user.name)
  SLACK-API-URL:
    type: string
    default: "https://slack.com/api"

variables:
  - &workspace /home/circleci/project

executors:
  python-executor:
    docker:
      - image: circleci/python:3.8
  testim-cli:
    docker:
      - image: testim/docker-cli
aliases:
  - &ola
      name: say ola
      command: |
        echo "Ola!a"

  - &get-slack-id
      name: Get Slack ID of user for mentions
      command: |
        AUTHOR_EMAIL=$(git log -n1 --format='%ae' $CIRCLE_SHA1)
        LOOKUP_RESULT=$(curl -s "${SLACK_API_URL}/users.lookupByEmail?token=${SLACK_BOT_TOKEN}&email=${AUTHOR_EMAIL}")
        SUCCESS=$(echo "$LOOKUP_RESULT" | jq ".ok")
        if [[ "$SUCCESS" == "true" ]]; then
          USER_ID=$(echo "$LOOKUP_RESULT" | jq -r ".user.id")
          CHANNEL=$USER_ID
          NAME=$(echo "$LOOKUP_RESULT" | jq -r ".user.name")
          echo "export MENTIONS=${USER_ID}" >> $BASH_ENV
        else
          echo "Couldn't find user with the email \"${AUTHOR_EMAIL}\". Your email in Github must match your email in slack."
        fi

orbs:
  slack: circleci/slack@3.4.2
  testimio: testimio/runner@1.1.0
  sumologic: circleci/sumologic@1.0.6

jobs:
  build:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/project
      - run: 
          name: create share environment variables in bash 
          command: |
            echo 'export MY_ENV_VAR="FOO"' >> shared_env
            cat shared_env >> $BASH_ENV        
      - run: 
          name: "Setup custom environment variables"
          command: |
            echo 'export MY_ENV_VAR="FOO"' >> $BASH_ENV 
            # Redirect MY_ENV_VAR into $BASH_ENV
      # Run a step to print what branch our code base is on.
      - run: # test what branch we're on.
          name: "What branch am I on?"
          command: echo ${CIRCLE_BRANCH}
      # Run another step, the same as above; note that you can
      # invoke environment variable without curly braces.
      # prints: XXXXXXX
      - run:
          name: "What branch am I on now?"
          command: echo $CIRCLE_BRANCH # prints: XXXXXXX
      - run:
          name: "What was my custom environment variable?"
          command: echo ${MY_ENV_VAR}  # prints: XXXXXXX
      - slack/notify:
          include_project_field: false
          ts:  <<pipeline.parameters.timestamp>>
          message: "*Deployment Started* \n
            *Commit ID* :\n
            <https://github.com/procurify/procurifydevelopment/commits/${CIRCLE_SHA1}|${CIRCLE_SHA1}> \n
            *By:*\n"
          mentions: '${MENTIONS}'
          webhook: ${SLACK_WEBHOOK}
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - .
  

  staging_deploy:
    executor: python-executor
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - checkout
      - run: *get-slack-id
      - run: cat shared_env >> $BASH_ENV 
      #test
      - run: echo ${MY_ENV_VAR}
      - slack/approval:
          color: '#0098a6'
          mentions: 'U0286CK1D'
          message: "*Pending Deployment* \n
             *Commit ID* :\n
            <https://github.com/procurify/procurifydevelopment/commits/${CIRCLE_SHA1}|${CIRCLE_SHA1}> \n
            *Approver:*\n"
          include_project_field: false                   
          webhook: ${SLACK_WEBHOOK}
workflows:
  simple_workflow:
    jobs:
      - slack/approval-notification:
          requires:
            - staging_deploy
          mentions: ${MENTIONS}
          message: "*This Deployment is waiting for approval from*: \n
              ${CIRCLE_USERNAME}\n
             *Commit ID* :\n
            <https://github.com/procurify/procurifydevelopment/commits/${CIRCLE_SHA1}|${CIRCLE_SHA1}> \n
              "
          include_project_field: false                   
          webhook: ${SLACK_WEBHOOK}
      - wait_for_approve:
          type: approval
      - build
      - staging_deploy:
          requires:
            - build
          